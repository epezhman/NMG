#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMG.Core.DataManager.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NMGTableMetaData")]
	public partial class NMGTableMetaDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertColumn(Column instance);
    partial void UpdateColumn(Column instance);
    partial void DeleteColumn(Column instance);
    partial void InsertDatabase(Database instance);
    partial void UpdateDatabase(Database instance);
    partial void DeleteDatabase(Database instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    #endregion
		
		public NMGTableMetaDataDataContext() : 
				base(global::NMG.Core.Properties.Settings.Default.NMGTableMetaDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NMGTableMetaDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NMGTableMetaDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NMGTableMetaDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NMGTableMetaDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Column> Columns
		{
			get
			{
				return this.GetTable<Column>();
			}
		}
		
		public System.Data.Linq.Table<Database> Databases
		{
			get
			{
				return this.GetTable<Database>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Column]")]
	public partial class Column : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _TableId;
		
		private string _CSharpType;
		
		private bool _PrimaryKey;
		
		private bool _ForeignKey;
		
		private bool _Nullable;
		
		private bool _UniqueKey;
		
		private bool _InList;
		
		private bool _InSort;
		
		private bool _InSearch;
		
		private bool _InLookUpLabel;
		
		private bool _InLookUpCombo;
		
		private string _Regx;
		
		private System.Nullable<int> _BeginRange;
		
		private System.Nullable<int> _EndRange;
		
		private string _PersianName;
		
		private System.Nullable<int> _DataLength;
		
		private string _ConstraintName;
		
		private bool _CheckRepepetiveError;
		
		private EntityRef<Table> _Table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnCSharpTypeChanging(string value);
    partial void OnCSharpTypeChanged();
    partial void OnPrimaryKeyChanging(bool value);
    partial void OnPrimaryKeyChanged();
    partial void OnForeignKeyChanging(bool value);
    partial void OnForeignKeyChanged();
    partial void OnNullableChanging(bool value);
    partial void OnNullableChanged();
    partial void OnUniqueKeyChanging(bool value);
    partial void OnUniqueKeyChanged();
    partial void OnInListChanging(bool value);
    partial void OnInListChanged();
    partial void OnInSortChanging(bool value);
    partial void OnInSortChanged();
    partial void OnInSearchChanging(bool value);
    partial void OnInSearchChanged();
    partial void OnInLookUpLabelChanging(bool value);
    partial void OnInLookUpLabelChanged();
    partial void OnInLookUpComboChanging(bool value);
    partial void OnInLookUpComboChanged();
    partial void OnRegxChanging(string value);
    partial void OnRegxChanged();
    partial void OnBeginRangeChanging(System.Nullable<int> value);
    partial void OnBeginRangeChanged();
    partial void OnEndRangeChanging(System.Nullable<int> value);
    partial void OnEndRangeChanged();
    partial void OnPersianNameChanging(string value);
    partial void OnPersianNameChanged();
    partial void OnDataLengthChanging(System.Nullable<int> value);
    partial void OnDataLengthChanged();
    partial void OnConstraintNameChanging(string value);
    partial void OnConstraintNameChanged();
    partial void OnCheckRepepetiveErrorChanging(bool value);
    partial void OnCheckRepepetiveErrorChanged();
    #endregion
		
		public Column()
		{
			this._Table = default(EntityRef<Table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int NOT NULL")]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._Table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CSharpType", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CSharpType
		{
			get
			{
				return this._CSharpType;
			}
			set
			{
				if ((this._CSharpType != value))
				{
					this.OnCSharpTypeChanging(value);
					this.SendPropertyChanging();
					this._CSharpType = value;
					this.SendPropertyChanged("CSharpType");
					this.OnCSharpTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryKey", DbType="Bit NOT NULL")]
		public bool PrimaryKey
		{
			get
			{
				return this._PrimaryKey;
			}
			set
			{
				if ((this._PrimaryKey != value))
				{
					this.OnPrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKey = value;
					this.SendPropertyChanged("PrimaryKey");
					this.OnPrimaryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForeignKey", DbType="Bit NOT NULL")]
		public bool ForeignKey
		{
			get
			{
				return this._ForeignKey;
			}
			set
			{
				if ((this._ForeignKey != value))
				{
					this.OnForeignKeyChanging(value);
					this.SendPropertyChanging();
					this._ForeignKey = value;
					this.SendPropertyChanged("ForeignKey");
					this.OnForeignKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nullable", DbType="Bit NOT NULL")]
		public bool Nullable
		{
			get
			{
				return this._Nullable;
			}
			set
			{
				if ((this._Nullable != value))
				{
					this.OnNullableChanging(value);
					this.SendPropertyChanging();
					this._Nullable = value;
					this.SendPropertyChanged("Nullable");
					this.OnNullableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueKey", DbType="Bit NOT NULL")]
		public bool UniqueKey
		{
			get
			{
				return this._UniqueKey;
			}
			set
			{
				if ((this._UniqueKey != value))
				{
					this.OnUniqueKeyChanging(value);
					this.SendPropertyChanging();
					this._UniqueKey = value;
					this.SendPropertyChanged("UniqueKey");
					this.OnUniqueKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InList", DbType="Bit NOT NULL")]
		public bool InList
		{
			get
			{
				return this._InList;
			}
			set
			{
				if ((this._InList != value))
				{
					this.OnInListChanging(value);
					this.SendPropertyChanging();
					this._InList = value;
					this.SendPropertyChanged("InList");
					this.OnInListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InSort", DbType="Bit NOT NULL")]
		public bool InSort
		{
			get
			{
				return this._InSort;
			}
			set
			{
				if ((this._InSort != value))
				{
					this.OnInSortChanging(value);
					this.SendPropertyChanging();
					this._InSort = value;
					this.SendPropertyChanged("InSort");
					this.OnInSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InSearch", DbType="Bit NOT NULL")]
		public bool InSearch
		{
			get
			{
				return this._InSearch;
			}
			set
			{
				if ((this._InSearch != value))
				{
					this.OnInSearchChanging(value);
					this.SendPropertyChanging();
					this._InSearch = value;
					this.SendPropertyChanged("InSearch");
					this.OnInSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InLookUpLabel", DbType="Bit NOT NULL")]
		public bool InLookUpLabel
		{
			get
			{
				return this._InLookUpLabel;
			}
			set
			{
				if ((this._InLookUpLabel != value))
				{
					this.OnInLookUpLabelChanging(value);
					this.SendPropertyChanging();
					this._InLookUpLabel = value;
					this.SendPropertyChanged("InLookUpLabel");
					this.OnInLookUpLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InLookUpCombo", DbType="Bit NOT NULL")]
		public bool InLookUpCombo
		{
			get
			{
				return this._InLookUpCombo;
			}
			set
			{
				if ((this._InLookUpCombo != value))
				{
					this.OnInLookUpComboChanging(value);
					this.SendPropertyChanging();
					this._InLookUpCombo = value;
					this.SendPropertyChanged("InLookUpCombo");
					this.OnInLookUpComboChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Regx", DbType="NVarChar(500)")]
		public string Regx
		{
			get
			{
				return this._Regx;
			}
			set
			{
				if ((this._Regx != value))
				{
					this.OnRegxChanging(value);
					this.SendPropertyChanging();
					this._Regx = value;
					this.SendPropertyChanged("Regx");
					this.OnRegxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginRange", DbType="Int")]
		public System.Nullable<int> BeginRange
		{
			get
			{
				return this._BeginRange;
			}
			set
			{
				if ((this._BeginRange != value))
				{
					this.OnBeginRangeChanging(value);
					this.SendPropertyChanging();
					this._BeginRange = value;
					this.SendPropertyChanged("BeginRange");
					this.OnBeginRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndRange", DbType="Int")]
		public System.Nullable<int> EndRange
		{
			get
			{
				return this._EndRange;
			}
			set
			{
				if ((this._EndRange != value))
				{
					this.OnEndRangeChanging(value);
					this.SendPropertyChanging();
					this._EndRange = value;
					this.SendPropertyChanged("EndRange");
					this.OnEndRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersianName", DbType="NVarChar(250)")]
		public string PersianName
		{
			get
			{
				return this._PersianName;
			}
			set
			{
				if ((this._PersianName != value))
				{
					this.OnPersianNameChanging(value);
					this.SendPropertyChanging();
					this._PersianName = value;
					this.SendPropertyChanged("PersianName");
					this.OnPersianNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataLength", DbType="Int")]
		public System.Nullable<int> DataLength
		{
			get
			{
				return this._DataLength;
			}
			set
			{
				if ((this._DataLength != value))
				{
					this.OnDataLengthChanging(value);
					this.SendPropertyChanging();
					this._DataLength = value;
					this.SendPropertyChanged("DataLength");
					this.OnDataLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstraintName", DbType="NVarChar(250)")]
		public string ConstraintName
		{
			get
			{
				return this._ConstraintName;
			}
			set
			{
				if ((this._ConstraintName != value))
				{
					this.OnConstraintNameChanging(value);
					this.SendPropertyChanging();
					this._ConstraintName = value;
					this.SendPropertyChanged("ConstraintName");
					this.OnConstraintNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckRepepetiveError", DbType="Bit NOT NULL")]
		public bool CheckRepepetiveError
		{
			get
			{
				return this._CheckRepepetiveError;
			}
			set
			{
				if ((this._CheckRepepetiveError != value))
				{
					this.OnCheckRepepetiveErrorChanging(value);
					this.SendPropertyChanging();
					this._CheckRepepetiveError = value;
					this.SendPropertyChanged("CheckRepepetiveError");
					this.OnCheckRepepetiveErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column", Storage="_Table", ThisKey="TableId", OtherKey="Id", IsForeignKey=true)]
		public Table Table
		{
			get
			{
				return this._Table.Entity;
			}
			set
			{
				Table previousValue = this._Table.Entity;
				if (((previousValue != value) 
							|| (this._Table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table.Entity = null;
						previousValue.Columns.Remove(this);
					}
					this._Table.Entity = value;
					if ((value != null))
					{
						value.Columns.Add(this);
						this._TableId = value.Id;
					}
					else
					{
						this._TableId = default(int);
					}
					this.SendPropertyChanged("Table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Database]")]
	public partial class Database : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ConnectionString;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Table> _Tables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnConnectionStringChanging(string value);
    partial void OnConnectionStringChanged();
    #endregion
		
		public Database()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectionString", DbType="NVarChar(500)")]
		public string ConnectionString
		{
			get
			{
				return this._ConnectionString;
			}
			set
			{
				if ((this._ConnectionString != value))
				{
					this.OnConnectionStringChanging(value);
					this.SendPropertyChanging();
					this._ConnectionString = value;
					this.SendPropertyChanged("ConnectionString");
					this.OnConnectionStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_Message", Storage="_Messages", ThisKey="Id", OtherKey="DatabaseId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_Table", Storage="_Tables", ThisKey="Id", OtherKey="DatabaseId")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Database = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Database = null;
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Database = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Database = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Type;
		
		private string _Name;
		
		private string _FaName;
		
		private string _EnName;
		
		private System.Nullable<int> _DatabaseId;
		
		private EntityRef<Database> _Database;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFaNameChanging(string value);
    partial void OnFaNameChanged();
    partial void OnEnNameChanging(string value);
    partial void OnEnNameChanged();
    partial void OnDatabaseIdChanging(System.Nullable<int> value);
    partial void OnDatabaseIdChanged();
    #endregion
		
		public Message()
		{
			this._Database = default(EntityRef<Database>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaName", DbType="NVarChar(500)")]
		public string FaName
		{
			get
			{
				return this._FaName;
			}
			set
			{
				if ((this._FaName != value))
				{
					this.OnFaNameChanging(value);
					this.SendPropertyChanging();
					this._FaName = value;
					this.SendPropertyChanged("FaName");
					this.OnFaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnName", DbType="NVarChar(500)")]
		public string EnName
		{
			get
			{
				return this._EnName;
			}
			set
			{
				if ((this._EnName != value))
				{
					this.OnEnNameChanging(value);
					this.SendPropertyChanging();
					this._EnName = value;
					this.SendPropertyChanged("EnName");
					this.OnEnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseId", DbType="Int")]
		public System.Nullable<int> DatabaseId
		{
			get
			{
				return this._DatabaseId;
			}
			set
			{
				if ((this._DatabaseId != value))
				{
					if (this._Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIdChanging(value);
					this.SendPropertyChanging();
					this._DatabaseId = value;
					this.SendPropertyChanged("DatabaseId");
					this.OnDatabaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_Message", Storage="_Database", ThisKey="DatabaseId", OtherKey="Id", IsForeignKey=true)]
		public Database Database
		{
			get
			{
				return this._Database.Entity;
			}
			set
			{
				Database previousValue = this._Database.Entity;
				if (((previousValue != value) 
							|| (this._Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Database.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Database.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._DatabaseId = value.Id;
					}
					else
					{
						this._DatabaseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Database");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _DatabaseId;
		
		private EntitySet<Column> _Columns;
		
		private EntityRef<Database> _Database;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDatabaseIdChanging(int value);
    partial void OnDatabaseIdChanged();
    #endregion
		
		public Table()
		{
			this._Columns = new EntitySet<Column>(new Action<Column>(this.attach_Columns), new Action<Column>(this.detach_Columns));
			this._Database = default(EntityRef<Database>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseId", DbType="Int NOT NULL")]
		public int DatabaseId
		{
			get
			{
				return this._DatabaseId;
			}
			set
			{
				if ((this._DatabaseId != value))
				{
					if (this._Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIdChanging(value);
					this.SendPropertyChanging();
					this._DatabaseId = value;
					this.SendPropertyChanged("DatabaseId");
					this.OnDatabaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_Column", Storage="_Columns", ThisKey="Id", OtherKey="TableId")]
		public EntitySet<Column> Columns
		{
			get
			{
				return this._Columns;
			}
			set
			{
				this._Columns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Database_Table", Storage="_Database", ThisKey="DatabaseId", OtherKey="Id", IsForeignKey=true)]
		public Database Database
		{
			get
			{
				return this._Database.Entity;
			}
			set
			{
				Database previousValue = this._Database.Entity;
				if (((previousValue != value) 
							|| (this._Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Database.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Database.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._DatabaseId = value.Id;
					}
					else
					{
						this._DatabaseId = default(int);
					}
					this.SendPropertyChanged("Database");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table = this;
		}
		
		private void detach_Columns(Column entity)
		{
			this.SendPropertyChanging();
			entity.Table = null;
		}
	}
}
#pragma warning restore 1591
